package utils

import (
	cryptorand "crypto/rand"
	"encoding/base64"
	"fmt"
	"math/rand"
	"strconv"
	"strings"
	"time"

	"github.com/sirupsen/logrus"
)

var r = rand.New(rand.NewSource(time.Now().UnixNano()))
var aiIDList = []int32{101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 9999, 10000, 10101, 10102, 10103, 10104, 10105, 10201, 10202, 10203, 10204, 10205, 10301, 10302, 10303, 10304, 10305, 10401, 10402, 10403, 10404, 10405, 10501, 10502, 10503, 10504, 10505, 10601, 10602, 10603, 10604, 10605, 10701, 10702, 10703, 10704, 10705, 10801, 10802, 10803, 10804, 10805, 10901, 10902, 10903, 10904, 10905, 11001, 11002, 11003, 11004, 11005, 11001, 11002, 11003, 11004, 11005, 11001, 11002, 11003, 11004, 11005, 11001, 11002, 11003, 11004, 11005, 11001, 11002, 11003, 11004, 11005, 11001, 11002, 11003, 11004, 11005, 11001, 11002, 11003, 11004, 11005, 20001, 20002, 20003, 20004, 20005, 20006, 20007, 20008, 20009, 20010, 20011, 20012, 20013, 20014, 20015, 20016, 20017, 20018, 20019, 20020, 20021, 20022, 20023, 20024, 20025, 20026, 20027, 20028, 20029, 20030, 20031, 20032, 20033, 20034, 20035, 20036, 20037, 20038, 20039, 20040, 20041, 20042, 20043, 20044, 20045, 20046, 20047, 20048, 20049, 20050, 20051, 20052, 20053, 20054, 20055, 20056, 20057, 20058, 20059, 20060, 20101, 20102, 20103, 20104, 20105, 20106, 20107, 20108, 20109, 20110, 20111, 20112, 20113, 20114, 20115, 20116, 20117, 20118, 20119, 20120, 20121, 20122, 20123, 20124, 20125, 20126, 20127, 20128, 20129, 20130, 20131, 20132, 20133, 20134, 20135, 20136, 20137, 20138, 20139, 20140, 20141, 20142, 20143, 20144, 20145, 20146, 20147, 20148, 20149, 20150, 20151, 20152, 20153, 20154, 20155, 20156, 20157, 20158, 20159, 20160, 20401, 20402, 20403, 20404, 20405, 20406, 20407, 20408, 20409, 20410, 20411, 20412, 20413, 20414, 20415, 20416, 20417, 20418, 20419, 20420, 20421, 20422, 20423, 20424, 20425, 20426, 20427, 20428, 20429, 20430, 20431, 20432, 20433, 20434, 20435, 20436, 20437, 20438, 20439, 20440, 20441, 20442, 20443, 20444, 20445, 20446, 20447, 20448, 20449, 20450, 20451, 20452, 20453, 20454, 20455, 20456, 20457, 20458, 20459, 20460, 20501, 20502, 20503, 20504, 20505, 20506, 20507, 20508, 20509, 20510, 20511, 20512, 20513, 20514, 20515, 20516, 20517, 20518, 20519, 20520, 20521, 20522, 20523, 20524, 20525, 20526, 20527, 20528, 20529, 20530, 20531, 20532, 20533, 20534, 20535, 20536, 20537, 20538, 20539, 20540, 20541, 20542, 20543, 20544, 20545, 20546, 20547, 20548, 20549, 20550, 20551, 20552, 20553, 20554, 20555, 20556, 20557, 20558, 20559, 20560}

func GetRandomInt(min int, max int) int {
	return r.Intn(max-min) + min
}

func GetRandomNumber(n int) string {
	letters := []rune("0123456789")
	b := make([]rune, n)
	for i := range b {
		b[i] = letters[r.Intn(len(letters))]
	}
	return string(b)
}

func GetRandomString(n int) string {
	letters := []rune("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
	b := make([]rune, n)
	for i := range b {
		b[i] = letters[r.Intn(len(letters))]
	}
	return string(b)
}

func GetRandomHeroID() int32 {
	return int32(r.Intn(85) + 1)
}

func GetShowID(num int64) string {
	return strings.Replace(strconv.FormatInt(num, 10), "0000000", "", -1)
}

func GetRoleName(num int64) string {
	return fmt.Sprintf("塔防精灵%d", num)
}

func GetRandomKey() uint8 {
	return uint8(r.Intn(255) + 1)
}

func GetRandomMachinariumcarID() int32 {
	return int32(r.Intn(13) + 1)
}

func GetFightToken() string {
	// 生成32字节的随机字节片
	randomBytes := make([]byte, 32)
	if _, err := cryptorand.Read(randomBytes); err != nil {
		logrus.Error("rand.Read: ", err)
		return ""
	}

	// 将随机字节片转换为可读的字符串格式
	return base64.StdEncoding.EncodeToString(randomBytes)
}

func GetRandomAIID() int32 {
	return aiIDList[r.Intn(len(aiIDList))]
}
